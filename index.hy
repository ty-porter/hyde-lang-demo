class HTMLGenerator {
  init() {
    # Tag types
    this.aTag    = "a";
    this.divTag  = "div";
    this.hOneTag = "h1";
    this.iTag    = "i";
    this.imgTag  = "img";
    this.pTag    = "p";
    this.spanTag = "span";

    # Static tags
    this.hr      = "<hr />";

    # HTMLGenerator constants
    this.CSS_PATH     = "static/css/styles.css";
    this.FAVICON_PATH = "static/ico/favicon-32x32.png";
  }

  a(href, text) {
    var attribute = "href='" + href + "'";

    return this.wrapAttributes(this.aTag, text, attribute);
  }

  body(enclosing) {
    return this.wrapClass("body", enclosing, nil);
  }

  div(htmlClass, text) {
    return this.wrapClass(this.divTag, text, htmlClass);
  }

  head() {
    return this.wrapAttributes("head", this.css() + " " + this.favIcon(), nil);
  }

  # TODO: Numbers in identifiers don't work for some reason :(
  hOne(htmlClass, text) {
    return this.wrapClass(this.hOneTag, text, htmlClass);
  }

  html(enclosing) {
    return this.wrapAttributes("html", enclosing, nil);
  }

  i(htmlClass, text) {
    return this.wrapClass(this.iTag, text, htmlClass);
  }

  img(htmlClass, src) {
    var formattedSrc   = this.formatAttribute(src, "src");
    var formattedClass = this.formatClass(htmlClass);

    return this.wrapSelfClosingTag(this.imgTag, this.formatAttributes(formattedSrc + " " + formattedClass));
  }

  link(rel, type, href) {
    var relAttribute  = "rel='" + rel + "'";
    var typeAttribute = "type='" + type + "'";
    var hrefAttribute = "href='" + href + "'";
    var attributes    = relAttribute + " " + hrefAttribute;

    return this.wrapSelfClosingTag("link", attributes);
  }

  p(htmlClass, text) {
    return this.wrapClass(this.pTag, text, htmlClass);
  }

  span(htmlClass, text) {
    return this.wrapClass(this.spanTag, text, htmlClass);
  }

  # Helpers
  css() {
    return this.link("stylesheet", "text/css", this.CSS_PATH);
  }

  favIcon() {
    return this.link("shortcut icon", "", this.FAVICON_PATH);
  }

  formatAttribute(attribute, type) {
    var formattedAttribute = "";

    if (attribute != nil) {
      formattedAttribute = " " + type + "='" + attribute + "'";
    }

    return formattedAttribute;
  }

  formatAttributes(attributes) {
    var formattedAttributes = "";

    if (attributes != nil) {
      formattedAttributes = " " + attributes;
    }

    return formattedAttributes;
  }
 
  formatClass(htmlClass) {
    var formattedClass = "";
    
    if (htmlClass != nil) {
      formattedClass = "class='" + htmlClass + "'";
    }

    return formattedClass;
  }

  wrapClass(tagType, text, htmlClass) {
    var formattedClass = this.formatClass(htmlClass);

    if (text == nil) {
      text = "";
    }

    return this.wrapAttributes(tagType, text, formattedClass);
  }

  wrapAttributes(type, text, attributes) {
    var formattedAttributes = this.formatAttributes(attributes);

    if (text == nil) {
      text = "";
    }

    return "<" + type + formattedAttributes + ">" + text + "</" + type + ">";
  }

  wrapSelfClosingTag(type, attributes) {
    var formattedAttributes = this.formatAttributes(attributes);

    return "<" + type + formattedAttributes + "/>";
  }
}

var htmlGenerator = HTMLGenerator();

var a    = htmlGenerator.a;
var body = htmlGenerator.body;
var div  = htmlGenerator.div;
var i    = htmlGenerator.i;
var img  = htmlGenerator.img;
var head = htmlGenerator.head;
var hOne = htmlGenerator.hOne;
var html = htmlGenerator.html;
var p    = htmlGenerator.p;
var span = htmlGenerator.span;

var hr   = htmlGenerator.hr;

print html(
  head() + 
  body(
    div("app-container",
      div("header-container",
        hOne("header-title text-reverse",
          "Hyde Lang"
        )
      ) + 
      div("title-container container",
        hOne("article-title",
          "Hello World!"
        )
      ) + 
      div("about-container container",
        div(nil,
          p(nil, "Hi! This website is rendering HTML generated by Hyde, a language I created after following the guide from Robert Nystrom's book " + 
            a("https://craftinginterpreters.com/", i(nil, "Crafting Interpreters")) + "."
          )
        ) +
        div(nil,
          p(nil, "I highly recommend you check out his book if you're interested in learning about how programming languages " + i(nil, "really") + " work.")
        ) +
        div("img-container container",
          img("img-xlarge", "https://craftinginterpreters.com/image/header.png")
        )
      ) + 
      hr + 
      div("tech-about-container container",
        div(nil,
          p(nil, "You're reading this website from a Hyde script that is generating HTML. I implemented Hyde on top of Python -- it can be installed via " + a("https://pypi.org/project/hyde-lang/", "pypi") + ".")
        ) +
        div(nil,
          p(nil, "This application is hosted on Heroku using the standard Python buildpack, which installs Hyde as a dependency. "
          + "From there, it uses " + span("inline-code", ".hy") + " files in place of " + span("inline-code", ".html") + " files to render webpages!")
        ) + 
        div(nil,
          p(nil, 
            "Check out the source code for Hyde " + 
              a("https://github.com/ty-porter/hyde", "here") + 
              " or check out this demo repo "  + 
              a("https://github.com/ty-porter/hyde-lang-demo", "here") + "."
          )
        )
      ) + 
      hr +
      div("me-about-container container",
        p(nil, 
          "I'm " + a("https://github.com/ty-porter", "ty-porter") + ", a professional Rails developer during my day job."
        ) + 
        p(nil, 
          "Want to read more about my work? Check out " + a("https://ty-porter.dev", "my portfolio") + " or " + a("https://blog.ty-porter.dev", "my blog") + "!"
        )
      ) + 
      div("footer-container",
        div("img-container container",
          a("https://ty-porter.dev",
            img("img-circle img-small", "https://tylerbporter.com/images/headshot.jpg")
          )
        ) + 
        p("text-reverse", "Â© 2021 Tyler Porter with " + a("https://github.com/ty-porter/hyde", "Hyde") + ".")
      )
    )
  )
);
